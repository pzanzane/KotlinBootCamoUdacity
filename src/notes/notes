/* Constructors */
1.  Kotlin can have one primary constructor
2.  Secondary constructor with keyword "constructor", should call to another constructor ultimately leading to primary constructor
    using :this() keyword
3.  Goog Kotlin class should have one constructor with default values, if we are considering have secondary constructor
    we should also consider having helper merthode to create object from constructor with default values.
4.  init{} blocks are blocks which are executed right after primary constructor.
    init blocks can be anywhere in code, properties which we want to access in init blocks should be declared before init blocks

/* Accessibility modifiers *
1. 4 modifiers, Public, Private, protected, internal.
2. Default modifier is "Public"
3. Private is inside of a class only, no subclass can see it.
4. Protected inside of class and subclass can see it. Protected cannot be applied on Class
5. internal is visible to module, Module is "All the files compiled together", so technically, internal modifier inside
    of app will be visible to whole app, internal modifier inside of library will only be visible to library.

/* Methods */
1. By default methode return Kotlin.Unit
2. We can have Single line methode without parenthesis
3. We can have default values to methode parameters, we can ignore those params and default values will be set to param.
   Non default value params should be declared before default params as a Standard Practice
4. We can use named params to pass value in different order than they have defined.

/* interface delegation */
1. Kotlin way of creating proxy pattern is using "by" keyword while implementing interface.
2. Syntax "interfaceName" by "implementationObjectName".
3. All calls for the interface methods are delegated to implementation object.

/* Types of classes */
1. There are 3 types of Special classes
    object (For singleton), enum, sealed (To create subclass in same file, equivalent to having a private primary constructor)

2. data class, creates an implementation of class with toString, equals and hascode for all
   declared variables in primary constructor.
   data class, can have secondary constructor.
   We can destructre data class, Normal class cannot be destructure unless we have componentN() function declared.

/* Special Collection*/
1. Pair<A,B>, Triple<A,B,C>
   We can use these special collection to return more than one value from function.
   We can destructure Pair and Triple.

/* Constants */
/* URL: https://classroom.udacity.com/courses/ud9011/lessons/ff6e5f4e-569e-4a3b-922f-be6a5d961f50/concepts/7ad9abbc-1f3f-4753-a556-89ad0072fc39*/
1. Const keyword is used to create compile time constants
2. Const can be used either ar Top level at outside of class, in object class (Singleton)
   or in Companion object inside normal class, it cannot be used directly inside of normal class.

/* Extensions */
1. Extension function, Extension Property, receiver nullable
2. Extension function
   These extensions are statically applied to type of class, which means parent extension and child extension will
   be different and cannot be override
   These extension can only use public variable and methods

3. Extension Property
   Similar to extension function.
   We have to specify get() in case of val and get() set() in case of var to create extension property.

4. Receiver null extensions, are extensions which can receive null.
   Defined as ClassName?.extensionName, we can call this extension on null object without null safety